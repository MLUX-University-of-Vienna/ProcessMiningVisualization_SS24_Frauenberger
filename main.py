#generated by chatGPT

import sys
import csv
import pydot
import networkx as nx
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QTableWidget, QTableWidgetItem

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
    
        # Set up the user interface
        self.table = QTableWidget(self)
        self.setCentralWidget(self.table)

        # Add a file menu to allow users to upload a CSV file
        file_menu = self.menuBar().addMenu("File")
        upload_action_csv = file_menu.addAction("Upload CSV File")
        upload_action_dot = file_menu.addAction("Upload DOT File")
        upload_action_csv.triggered.connect(self.upload_csv)
        upload_action_dot.triggered.connect(self.upload_dot)


        # Set the window title and show the window
        self.setWindowTitle("Graph Viewer")
        self.show()

    def upload_csv(self):
        # Open a file dialog to allow users to select a CSV file
        filename, _ = QFileDialog.getOpenFileName(self, "Open CSV File", "", "CSV files (*.csv)")

        # If the user cancels the file dialog, return
        if not filename:
            return

        # Parse the CSV file and store it in memory
        with open(filename, newline='') as csvfile:
            reader = csv.reader(csvfile, delimiter=',', quotechar='"')
            data = []
            for row in reader:
                data.append(row)

        # Display the contents of the CSV file in the app
        self.table.setRowCount(len(data))
        self.table.setColumnCount(len(data[0]))
        for i, row in enumerate(data):
            for j, val in enumerate(row):
                item = QTableWidgetItem(val)
                self.table.setItem(i, j, item)
        
        print("CSV uploaded")
    
    def upload_dot(self):
        # Open a file dialog to allow users to select a DOT file
        filename, _ = QFileDialog.getOpenFileName(self, "Open DOT File", "", "DOT files (*.dot)")

        # If the user cancels the file dialog, return
        if not filename:
            return

        graph = pydot.graph_from_dot_file(filename)
        nx_graph = nx.nx_pydot.from_pydot(graph[0])
        plt.figure(figsize=(10, 10))
        nx.draw_networkx(nx_graph, with_labels=True)
        plt.show()

        print("DOT uploaded")




if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec_())

